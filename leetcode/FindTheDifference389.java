package zsz.develop;

import java.util.HashSet;

/**
 * 
		Find the Difference
		Given two strings s and t which consist of only lowercase letters.
		
		String t is generated by random shuffling string s and then add one more letter at a random position.
		
		Find the letter that was added in t.
		
		Example:
		
		Input:
		s = "abcd"
		t = "abcde"
		
		Output:
		e
		
		Explanation:
		'e' is the letter that was added.
		
		
		
		发现差异
		给定两个字符串S和T，其中包括唯一的小写字母。
		字符串T是由随机混合的字符串s生成的，然后在一个随机位置添加一个字母。
		找到在T中添加的信。
		例子:
		输入：
		S =“ABCD”
		T =“ABCDE”
		输出：
		E
 * @author zhangsz
 *
 */
public class FindTheDifference389 {

	public static void main(String[] args) {
		char findTheDifference = findTheDifferenceMyTwo("cabeyd", "abdce");
		System.out.println("findTheDifference:" + findTheDifference);
	}

	/**
	 * 与136.Single Number出奇的相似。他们都是有的出现两次，求剩下一次的那个。 这种问题要用的hashset 和位运算的特性
	 * hashset key只能出现一次 位运算的话 ^ 异或的特性。两个完全相同为0
	 * 
	 * 问题1：如何将字符串转为char[]: s.toCharArray();
	 * 
	 * @param s
	 * @param t
	 * @return
	 */
	public static char findTheDifferenceMyOne(String s, String t) {

		HashSet<Character> set = new HashSet<>();
		char[] scs = s.toCharArray();
		char[] tcs = t.toCharArray();
		for (char c : scs) {

			if (!set.add(c))
				set.remove(c);
		}
		for (char c : tcs) {

			if (!set.add(c))
				set.remove(c);
		}

		return set.iterator().next();
	}

	/**
	 * 漂亮，这种解法也正确
	 * @param s
	 * @param t
	 * @return
	 */
	public static char findTheDifferenceMyTwo(String s, String t) {
		// 发现这两个似乎不太需要，直接在for循环中charAt 出来就可以
		char[] scs = s.toCharArray();
		char[] tcs = t.toCharArray();
		char result = 0;
		for (char c : scs) {
			result^=c;
		}
		for (char c : tcs) {
			result^=c;
		}
		return result;

	}
	
	/**
	 * 别人的解法一
	 * 算法优雅的关键：字符串T是由随机混合的字符串s生成的，然后在一个随机位置添加一个字母。
	 * @param s
	 * @param t
	 * @return
	 */
	public char findTheDifferenceOtherOne(String s, String t) {
		int n = t.length();
		char c = t.charAt(n - 1);//初始值取最后一个，然后用一个循环便可以达到目的
		for (int i = 0; i < n - 1; ++i) {
			c ^= s.charAt(i);
			c ^= t.charAt(i);
		}
		return c;
	}
}
